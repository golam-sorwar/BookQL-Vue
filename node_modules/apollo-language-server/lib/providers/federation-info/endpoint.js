"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_link_1 = require("apollo-link");
const apollo_link_http_1 = require("apollo-link-http");
const graphql_1 = require("graphql");
const http_1 = require("http");
const apollo_env_1 = require("apollo-env");
class EndpointFederationInfoProvider {
    constructor(config) {
        this.config = config;
    }
    async getFederationInfo() {
        const { skipSSLValidation, url, headers } = this.config;
        const options = Object.assign({ uri: url, fetch: apollo_env_1.fetch }, (skipSSLValidation && { fetchOptions: { agent: new http_1.Agent() } }));
        const getFederationInfoQuery = `
      query getFederationInfo {
        _service {
          sdl
        }
      }
    `;
        const { data, errors } = (await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {
            query: graphql_1.parse(getFederationInfoQuery),
            context: { headers }
        })));
        if (errors && errors.length) {
            throw new Error(errors.map(({ message }) => message).join("\n"));
        }
        if (!data || !data._service) {
            throw new Error("No data received from server when querying for _service.");
        }
        return data._service;
    }
    async resolveFederationInfo() {
        if (!this.info) {
            this.info = await this.getFederationInfo();
        }
        if (!this.info)
            throw new Error("No service info returned by service");
        return this.info;
    }
}
exports.EndpointFederationInfoProvider = EndpointFederationInfoProvider;
//# sourceMappingURL=endpoint.js.map